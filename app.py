# app.py (VERSION FINALE PROPRE, MODULAIRE ET STABLE avec marge corrig√©e et refonte UI)
import streamlit as st
import pandas as pd
import json
import os
import sys
from io import StringIO
from datetime import datetime
import subprocess
import time

# üî• Importation des modules (Moteurs d'Analyse et Console PoC)
try:
    # Assurez-vous que ces modules existent dans votre environnement
    from Recon import run_recon
    from Api_scan import run_api_scan, SECURITY_SCORE_WEIGHTS
    from Exploit_Adv import run_vulnerability_scan, simulate_poc_execution 
except ImportError as e:
    # D√©finit des placeholders si l'importation √©choue.
    def placeholder_func(*args, **kwargs):
        if kwargs.get('command'):
            return f"ERREUR CRITIQUE: Le module de s√©curit√© est manquant. D√©tails: {e}", 500
        raise ImportError(f"FATAL ERROR: Security module missing or misnamed. Details: {e}") 
    run_recon = run_api_scan = run_vulnerability_scan = simulate_poc_execution = placeholder_func
    # Valeurs par d√©faut si le module Api_scan est manquant
    SECURITY_SCORE_WEIGHTS = {'ENDPOINT_EXPOSED': 15, 'INJECTION_VULNERABLE': 30, 'PARAM_REFLECTION': 10}
# La console PoC (poc_console) est import√©e dans la fonction main() pour g√©rer les d√©pendances.


# ===============================================================================
#                             FONCTIONS D'EXECUTION / LOGS
# ===============================================================================

def execute_and_capture(func, target, config=None, module_name="Module"):
    """Ex√©cute une fonction d'analyse et capture son output stdout/logs."""
    
    if module_name == "Module 3": 
        # Le Module 3 (Vulnerability Scan) utilise un g√©n√©rateur pour les logs en temps r√©el.
        return "", 0 
        
    start_time = datetime.now()
    old_stdout = sys.stdout
    redirected_output = sys.stdout = StringIO()
    try:
        if config:
            func(target, config)
        else:
            func(target)
    finally:
        sys.stdout = old_stdout
    elapsed_time = (datetime.now() - start_time).total_seconds()
    return redirected_output.getvalue(), elapsed_time


def execute_post_scan_command(target_domain, command, output_lines):
    """Ex√©cute une commande syst√®me fournie par l'utilisateur."""
    final_command = command.replace("{TARGET}", target_domain)
    output_lines.append(f"\n[POST-SCAN] >>> EX√âCUTION DE COMMANDE SYST√àME <<<")
    output_lines.append(f"[POST-SCAN] Commande lanc√©e: {final_command}")
    try:
        # Utilisation de shell=True pour la substitution de commande et l'ex√©cution
        result = subprocess.run(final_command, shell=True, capture_output=True, text=True, check=True)
        output_lines.append(f"[POST-SCAN] Statut: SUCC√àS (Code {result.returncode})")
        output_lines.append(f"[POST-SCAN] Sortie standard (stdout):")
        output_lines.append("------STDOUT START------")
        output_lines.extend(result.stdout.splitlines())
        output_lines.append("------STDOUT END------")
    except subprocess.CalledProcessError as e:
        output_lines.append(f"[POST-SCAN] Statut: ERREUR D'EX√âCUTION (Code {e.returncode})")
        output_lines.append(f"[POST-SCAN] Erreur standard (stderr):")
        output_lines.append("------STDERR START------")
        output_lines.extend(e.stderr.splitlines())
        output_lines.append("------STDERR END------")
    except FileNotFoundError:
        output_lines.append("[POST-SCAN] Statut: ERREUR")
        output_lines.append("[POST-SCAN] CRITICAL: Commande introuvable.")
    except Exception as e:
        output_lines.append(f"[POST-SCAN] Statut: ERREUR CRITIQUE: {str(e)}")

# ===============================================================================
#                           CONFIGURATION DES MODULES
# ===============================================================================

def load_user_config():
    """Charge les options de configuration depuis la sidebar, regroup√©es dans des expanders."""
    st.sidebar.header("‚öôÔ∏è Configuration des Modules")
    
    # --- D√©finition des Objectifs/Scope (Reste critique et visible) ---
    st.sidebar.subheader("üéØ Objectifs du Pentest")
    pentest_goal = st.sidebar.text_area(
        "Scope / But Principal du Test",
        value="V√©rifier la configuration de s√©curit√© de l'infrastructure web (Headers et exposition API).",
        height=100,
        key="pentest_goal_input",
        help="D√©finissez clairement ce que le test doit d√©couvrir ou valider."
    )
    st.sidebar.divider() # Utilisation du s√©parateur moderne
    
    # --- Param√®tres G√©n√©raux (Regroup√©s) ---
    with st.sidebar.expander("G√©n√©ral (Timeout / Fallback)"):
        timeout = st.slider("D√©lai d'attente (Timeout) en secondes", min_value=3, max_value=20, value=7, step=1, help="Dur√©e maximale d'attente pour une r√©ponse HTTP/S pour Recon et API Scan.")
        use_http_fallback = st.checkbox("Utiliser Fallback HTTP (si HTTPS √©choue)", value=True, help="Si coch√©e, le scan testera HTTP si HTTPS ne r√©pond pas.")

    # --- Configuration Module 2 (Regroup√©e) ---
    with st.sidebar.expander("Configuration Module 2 (API Scan)"):
        custom_ua = st.text_input("User Agent Personnalis√©", value="TROPIC-ProAPI-Analyzer/2.1 (EthicalHacking)", help="Identifiant utilis√© pour les requ√™tes HTTP/S dans le Module 2.")
    
    # --- Post-Scan Executor (Regroup√©) ---
    with st.sidebar.expander("üåê Post-Scan Executor"):
        post_scan_command = st.text_input("Commande Terminal √† Ex√©cuter", value="echo Scan TROPIC termin√© pour {TARGET}", help="Sera ex√©cut√© apr√®s tous les modules.")
    
    # --- Module 3 (Exploit / PoC) (Reste visible ou regroup√© si n√©cessaire, ici conserv√© pour la clart√© critique) ---
    st.sidebar.divider()
    st.sidebar.subheader("Module 3 (Exploit / PoC)")
    allow_real_poc = st.sidebar.checkbox(
        "Autoriser l'ex√©cution r√©elle (RCE) depuis la Console PoC (FORC√â)",
        value=True,  # DEFAULT = True -> FORCE behavior
        help="Cochez uniquement si vous avez un consentement explicite et comprenez les risques. Par d√©faut activ√© (FORCE)."
    )
    
    return {
        "timeout": timeout,
        "use_http_fallback": use_http_fallback,
        "user_agent": custom_ua,
        "post_scan_command": post_scan_command,
        "pentest_goal": pentest_goal,
        "allow_real_poc": allow_real_poc
    }

# ===============================================================================
#                             FONCTIONS D'AFFICHAGE DU RAPPORT
# ===============================================================================

def display_recon_report(target):
    # Retir√© le st.subheader car il est dans l'onglet
    active_file = os.path.join("output", f"{target}_active_subdomains.txt")
    if os.path.exists(active_file):
        with open(active_file, 'r') as f:
            subdomains = [line.strip() for line in f if line.strip()]
        st.success(f"**{len(subdomains)}** sous-domains actifs trouv√©s et enregistr√©s.")
        df = pd.DataFrame(subdomains, columns=['Sous-Domaine Actif'])
        st.dataframe(df, use_container_width=True)
    else:
        st.warning("Aucun fichier de cibles actives trouv√©. Le scan a pu √©chouer. Lancez le Module 1.")

def display_api_scan_report(target):
    # Retir√© le st.subheader
    report_file = os.path.join("output", f"{target}_api_report.json")
    if not os.path.exists(report_file):
        st.error("Rapport API non trouv√©. Lancez le Module 2.")
        return

    with open(report_file, 'r') as f:
        report = json.load(f)
    
    if not report['scan_results']:
        st.warning("Aucun rapport d'analyse API n'a pu √™tre g√©n√©r√© (probablement d√ª √† une erreur de connexion sur toutes les cibles test√©es).")
        return
    
    main_report = report['scan_results'][0] 
    final_score = main_report.get('final_score', 0)
    
    # --- Affichage Visuel du Score Am√©lior√© (Design) ---
    st.markdown("#### Score de S√©curit√© Final")
    col_score, col_info = st.columns([1, 2])
    
    with col_score:
        # Utilisation de la structure Markdown/CSS pour un affichage N√©on stylis√©
        color = "#00FF00" if final_score >= 80 else ("#FFFF00" if final_score >= 50 else "#FF0000")
        level = "EXCELLENT" if final_score >= 80 else ("MOYEN" if final_score >= 50 else "CRITIQUE")
        
        st.markdown(f"""
            <div style="text-align: center; border: 2px solid {color}; padding: 10px; border-radius: 5px; box-shadow: 0 0 5px {color}88;">
                <p style="font-size: 0.9em; margin-bottom: 0; color: #FFFFFF;">Score TROPIC</p>
                <p style="font-size: 3em; font-weight: bold; margin-top: 5px; margin-bottom: 5px; color: {color};">
                    {final_score}<span style="font-size: 0.5em;">/100</span>
                </p>
                <p style="font-size: 0.8em; margin: 0; color: {color};">Niveau : **{level}**</p>
            </div>
        """, unsafe_allow_html=True)
        st.markdown(f"**Cible :** `{main_report['target_url']}`")

    with col_info:
        st.markdown("#### D√©tails & P√©nalit√©s")
        st.markdown(f"**P√©nalit√© par Endpoint Expos√© (200 OK) :** -{SECURITY_SCORE_WEIGHTS.get('ENDPOINT_EXPOSED', 15)} points.")
        st.markdown(f"**P√©nalit√© par Injection Vuln√©rable :** -{SECURITY_SCORE_WEIGHTS.get('INJECTION_VULNERABLE', 30)} points.")
        st.markdown("---")
        if final_score < 50:
            st.error("Des failles critiques ont √©t√© identifi√©es. Voir les r√©sultats des En-t√™tes ci-dessous.")
        elif final_score < 80:
            st.warning("Des failles moyennes n√©cessitent une attention imm√©diate.")
        else:
            st.success("La configuration de base des Headers est robuste.")


    findings = main_report['header_findings']
    if findings:
        st.markdown("#### Failles d'En-t√™te D√©tect√©es")
        df_findings = pd.DataFrame(findings)
        st.dataframe(df_findings[['severity', 'header', 'description']], use_container_width=True, hide_index=True)
    else:
        st.info("Aucun manquement critique ou divulgation d'en-t√™te de s√©curit√© d√©tect√©.")
        
    api_results = main_report['api_discovery']
    exposed_endpoints = [res for res in api_results if res['status'] == 200]
    st.markdown("#### Fuzzing d'Endpoints API")
    if exposed_endpoints:
        st.error(f"**{len(exposed_endpoints)} Endpoints Critiques expos√©s (200 OK)**")
        df_exposed = pd.DataFrame(exposed_endpoints)
        st.dataframe(df_exposed[['endpoint', 'description']], use_container_width=True, hide_index=True)
    else:
        st.info("Aucun endpoint critique n'a r√©pondu 200 OK lors du fuzzing.")

def display_vuln_scan_report(target):
    # Retir√© le st.subheader
    report_file = os.path.join("output", f"{target}_vulnerability_report.json")
    if not os.path.exists(report_file):
        st.error("Rapport de vuln√©rabilit√©s non trouv√©. Lancez le Module 3.")
        return
    with open(report_file, 'r') as f:
        report = json.load(f)
    vulns = report['vulnerabilities']
    total_vulns = len(vulns)
    
    st.metric(label="Vuln√©rabilit√©s Totales Trouv√©es", value=total_vulns)
    
    if total_vulns > 0:
        st.error(f"**{total_vulns}** d√©couvertes de vuln√©rabilit√©s enregistr√©es.")
        df_vulns = pd.DataFrame(vulns)
        display_cols = ['severity', 'target', 'title', 'remediation']
        st.dataframe(df_vulns.sort_values(by='severity', ascending=False)[display_cols], use_container_width=True, hide_index=True)
        with st.expander("Voir les recommandations de rem√©diation d√©taill√©es"):
            for title, remediation in df_vulns[['title', 'remediation']].drop_duplicates().values:
                st.markdown(f"**{title}**\n> *Rem√©diation :* {remediation}\n")
    else:
        st.info("Aucune vuln√©rabilit√© n'a √©t√© trouv√©e.")


# ===============================================================================
#                             INTERFACE PRINCIPALE
# ===============================================================================

def main():
    
    # 1. INJECTION DU TH√àME CYBER/MATRIX (CSS STATIQUE)
    st.markdown("""
    <style>
        /* STYLE N√âON POUR LE TITRE PRINCIPAL */
        .neon {
          color: #FFFFFF;
          text-shadow:
            0 0 7px #00FFFF,
            0 0 10px #00FFFF,
            0 0 21px #00FFFF,
            0 0 42px #0000FF,
            0 0 82px #0000FF,
            0 0 92px #0000FF,
            0 0 102px #0000FF,
            0 0 151px #0000FF;
          font-family: 'Monospace', monospace; 
          text-transform: uppercase;
          font-size: 3em; 
          /* üí° CORRECTION MARGE HAUTE du TITRE */
          margin-top: 0px !important; 
        }
        /* Style sp√©cifique pour les onglets pour coller au th√®me */
        .stTabs [data-testid="stTabContent"] {
            padding: 10px 0; /* R√©duit le padding interne des onglets */
        }
        .stTabs button {
            color: #00FFFF !important;
            border-bottom: 3px solid #00FFFF;
            background-color: #1A1A2E !important;
            box-shadow: 0 0 5px #00FFFF55;
            margin-right: 5px;
        }

        /* AM√âLIORATION DE LA BARRE LAT√âRALE (SIDEBAR) */
        [data-testid="stSidebar"] {
            background-color: #1A1A2E; 
            color: #00FFFF;
            box-shadow: 0 0 10px #00FFFF33; 
        }
        
        /* Modification des boutons pour un style plus agressif */
        .stButton>button {
            background-color: #00FFFF;
            color: #0E1117; 
            border: 2px solid #00FFFF;
            box-shadow: 0 0 8px #00FFFF;
            transition: all 0.3s ease;
        }
        .stButton>button:hover {
            background-color: #000000;
            color: #00FFFF;
            box-shadow: 0 0 15px #00FFFF;
            border-color: #00FFFF;
        }
        
        /* AVERTISSEMENT RED FLAG */
        .red-flag-box {
            background-color: #330000 !important; 
            border: 3px solid #ff0000 !important; 
            padding: 15px; 
            margin-bottom: 20px; 
            box-shadow: 0 0 15px rgba(255, 0, 0, 0.7); 
        }
        .red-flag-box p {
            color: #ff9999 !important;
        }
        
        /* Style pour les logs en temps r√©el */
        .stCode {
            background-color: #0c0c0c !important;
            color: #00ff00 !important;
            border: 1px solid #00ff00;
            padding: 15px;
            font-size: 14px;
            overflow-x: auto;
            max-height: 400px; 
        }
        
        /* üö®üö® CORRECTION VISUELLE DE LA BARRE DE PROGRESSION ROUGE FIXE üö®üö® */
        .stProgress > div > div > div > div {
            background-color: #ff0000; 
        }
        .stProgress > div > div > div {
            background-color: #330000; 
            border: 1px solid #ff0000; 
        }
        .stSidebar > div > div {
            color: #FFFFFF !important; 
        }
        /* Style pour centrer l'image native st.image */
        [data-testid="stImage"] {
            text-align: center;
        }

        /* --- BANNI√àRE --- */
        .banner-container {
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: transparent;
            /* üí° CORRECTION MARGE HAUTE du CONTENEUR BANNER */
            margin: 0 auto 16px auto !important; 
            padding: 4px;
            border-radius: 8px;
        }
        /* Styles pour l'image g√©n√©r√©e par st.image */
        .stImage > img {
            max-width: 100%;
            height: auto;
            max-height: 160px;
            border-radius: 6px;
        }
        
        /* S√©parateur pour les champs de formulaire */
        .stTextInput, .stSlider, .stCheckbox {
            margin-bottom: 5px;
        }

    </style>
    """, unsafe_allow_html=True)

    # -----------------------------
    # üé® BANNI√àRE GIF EN HAUT (avec espacement lat√©ral)
    # -----------------------------
    col_left_spacer, col_content, col_right_spacer = st.columns([1, 6, 1])

    def _find_banner_path():
        """
        Retourne le chemin du premier .gif trouv√© dans le dossier 'assets/' 
        (qui doit √™tre au m√™me niveau que app.py).
        """
        # CHEMIN CORRIG√â: Recherche directement dans le dossier 'assets'
        assets_dir = "assets" 
        
        # Testez les candidats en minuscules (meilleure pratique)
        candidates = ["banner.gif", "tropic_banner.gif"] 

        for c in candidates:
            p = os.path.join(assets_dir, c)
            if os.path.exists(p):
                return p
        
        # Fallback g√©n√©rique : cherche n'importe quel .gif dans le dossier (case-insensitive)
        if os.path.isdir(assets_dir):
            for f in os.listdir(assets_dir):
                if f.lower().endswith(".gif"):
                    p = os.path.join(assets_dir, f)
                    return p
        
        return None

    with col_content:
        gif_path = _find_banner_path()

        if gif_path and os.path.exists(gif_path):
            st.markdown('<div class="banner-container">', unsafe_allow_html=True)
            st.image(
                gif_path, 
                caption=None, 
                use_container_width=True, 
                output_format="GIF" 
            )
            st.markdown('</div>', unsafe_allow_html=True)
        else:
            st.warning("‚ö†Ô∏è Banni√®re introuvable : place ton fichier GIF (ex: banner.gif) dans le dossier 'assets/' au m√™me niveau que app.py.")

        # Titre N√©on (la marge sup√©rieure est r√©initialis√©e par le CSS ci-dessus)
        st.markdown('<h1 class="neon">TROPIC üå¥ by Karim</h1>', unsafe_allow_html=True)
        st.markdown("Outil de s√©curit√© complet en 3 phases, incluant un ex√©cuteur de commandes post-scan.")

        # AVERTISSEMENT RED FLAG MASSIF
        st.markdown("""
            <div class="red-flag-box">
                <p style="color: #ff0000; font-weight: bold; font-size: 1.5em; text-align: center;">
                    üõë RED FLAG WARNING: HACKER ETHIQUE - VOS RISQUES ENGAG√âS üõë
                </p>
                <p style="font-weight: bold;">
                    L'interface de Console d'Exploitation (PoC) est fournie pour la CONFIRMATION DE VULN√âRABILIT√âS CRITIQUES d√©tect√©es.
                </p>
                <p style="font-size: 0.9em;">
                    L'utilisation de TROPIC sur toute cible sans autorisation explicite, au-del√† du simple test passif, est une violation criminelle. En utilisant ce panel, vous assumez l'enti√®re et unique responsabilit√© de vos actions, incluant les cons√©quences l√©gales et √©thiques.
                </p>
            </div>
        """, unsafe_allow_html=True)

        # --- CHARGEMENT DE LA CONFIGURATION UTILISATEUR (Refonte Sidebar) ---
        # La fonction load_user_config() a √©t√© modifi√©e pour utiliser st.expander
        user_config = load_user_config()
        
        all_logs = [] 
        scan_successful = True

        # --------------------------------------------------------------------------
        # --- PERSISTANCE SESSION_STATE (INITIALISATION) ---
        # --------------------------------------------------------------------------
        
        if 'module3_logs' not in st.session_state:
            st.session_state['module3_logs'] = ""
        if 'module3_elapsed' not in st.session_state:
            st.session_state['module3_elapsed'] = 0.0
        if 'module3_run_id' not in st.session_state:
            st.session_state['module3_run_id'] = None
        if 'module3_running' not in st.session_state:
            st.session_state['module3_running'] = False
            
        if 'shell_cmd_history' in st.session_state:
            del st.session_state['shell_cmd_history']
            
        if 'shell_cmd_history_list' not in st.session_state:
            st.session_state['shell_cmd_history_list'] = []
        if 'current_shell_command_input' not in st.session_state:
            st.session_state['current_shell_command_input'] = ""

        # --- AFFICHAGE DU SCOPE ---
        st.markdown(f"**üéØ Objectif du Test :** _{user_config['pentest_goal']}_")
        st.divider() # Utilisation du s√©parateur moderne
        
        # --- INPUT DOMAIN ---
        target_domain = st.text_input("Domaine Cible (Ex: votre-cible.com)", value="votre-cible.com")
        st.divider() # Utilisation du s√©parateur moderne

        # --- S√âLECTION DES MODULES ---
        st.sidebar.header("Options d'Ex√©cution")
        run_all = st.sidebar.checkbox("Ex√©cuter les 3 Modules en S√©quence", value=True)
        
        if not run_all:
            st.sidebar.markdown("Ou s√©lectionner un module unique :")
            run_recon_module = st.sidebar.button("‚ñ∂Ô∏è Lancer Module 1 (Reconnaissance)")
            run_api_module = st.sidebar.button("‚ñ∂Ô∏è Lancer Module 2 (API Scan)")
            run_vuln_module = st.sidebar.button("‚ñ∂Ô∏è Lancer Module 3 (Vuln. Scan)")
        else:
            run_sequence = st.button("üöÄ Lancer l'Analyse Compl√®te (3 Modules)", type="primary", use_container_width=True)
            run_recon_module = run_api_module = run_vuln_module = False
            if run_sequence:
                run_recon_module = run_api_module = run_vuln_module = True

        # --- LOGIQUE D'EX√âCUTION ---
        if run_recon_module or run_api_module or run_vuln_module:
            
            if not target_domain:
                st.error("Veuillez entrer un domaine cible.")
                st.stop()

            os.makedirs("output", exist_ok=True)
            placeholder = st.empty()
            
            # D√©finir les onglets pour les rapports AVANT l'ex√©cution
            tab_recon, tab_api, tab_vuln = st.tabs(["üìä Module 1: Reconnaissance", "üõ°Ô∏è Module 2: S√©curit√© API", "üö® Module 3: Vuln√©rabilit√©s"])

            # 1. MODULE DE RECONNAISSANCE
            if run_recon_module:
                with placeholder.status(f"Module 1: Ex√©cution de la Reconnaissance sur **{target_domain}**...", expanded=True) as status:
                    log, time_elapsed = execute_and_capture(run_recon, target_domain, user_config, module_name="Module 1") 
                    all_logs.append(f"\n--- LOGS MODULE 1 ({time_elapsed:.2f}s) ---\n" + log)
                    status.update(label=f"‚úÖ Module 1 (Recon) termin√© en {time_elapsed:.2f}s", state="complete", expanded=False)
                with tab_recon:
                    display_recon_report(target_domain)
                st.divider()

            # 2. MODULE API SCAN
            if run_api_module:
                # V√©rification de d√©pendance
                if (run_all or run_api_module) and not os.path.exists(os.path.join("output", f"{target_domain}_active_subdomains.txt")):
                    st.warning("‚è© Skipping Module 2 : Le fichier des cibles actives est manquant. Lancez le Module 1 d'abord.")
                    scan_successful = False
                elif scan_successful: # Ex√©cution r√©elle
                    with placeholder.status(f"Module 2: Ex√©cution de l'Analyse API/Headers...", expanded=True) as status:
                        log, time_elapsed = execute_and_capture(run_api_scan, target_domain, user_config, module_name="Module 2")
                        all_logs.append(f"\n--- LOGS MODULE 2 ({time_elapsed:.2f}s) ---\n" + log)
                        status.update(label=f"‚úÖ Module 2 (API Scan) termin√© en {time_elapsed:.2f}s", state="complete", expanded=False)
                    with tab_api:
                        display_api_scan_report(target_domain)
                    st.divider()

            # 3. MODULE VULN SCAN (Exploit_Adv.py) - LOGS EN TEMPS R√âEL (PERSISTENT)
            if run_vuln_module:
                # V√©rification de d√©pendance
                if (run_all or run_vuln_module) and not os.path.exists(os.path.join("output", f"{target_domain}_active_subdomains.txt")):
                     st.warning("‚è© Skipping Module 3 : Le fichier des cibles actives est manquant. Lancez le Module 1 d'abord.")
                     scan_successful = False
                elif scan_successful: # Ex√©cution r√©elle
                    
                    with tab_vuln:
                        st.subheader("üíª Terminal d'Exploitation en Temps R√©el (Logs)")
                        
                        col_r1, col_r2 = st.columns([4, 1])
                        with col_r2:
                            if st.button("üîÅ Relancer Module 3 (Vuln. Scan)", key="rerun_mod3"):
                                st.session_state['module3_logs'] = ""
                                st.session_state['module3_elapsed'] = 0.0
                                st.session_state['module3_run_id'] = None
                                st.session_state['module3_running'] = False
                                st.rerun() 
                                
                        # Affichage du dernier r√©sultat si d√©j√† termin√©
                        if st.session_state.get('module3_run_id') == target_domain and st.session_state.get('module3_logs') and not st.session_state.get('module3_running'):
                            elapsed = st.session_state.get('module3_elapsed', 0.0)
                            st.success(f"Module 3 : Dernier scan pour {target_domain} (termin√© en {elapsed:.2f}s).")
                            st.code(st.session_state['module3_logs'], language='bash')
                            display_vuln_scan_report(target_domain)
                            st.divider()
                        elif st.session_state.get('module3_running', False) and st.session_state.get('module3_run_id') == target_domain:
                            st.info("Un scan Module 3 est en cours (sous cette session). Affichage des logs en direct.")
                            st.code(st.session_state['module3_logs'], language='bash')
                        else: # Lancement du scan
                            with placeholder.status(f"Module 3: Pr√©paration du Scan de Vuln√©rabilit√©s Avanc√© sur **{target_domain}**...", expanded=True) as status:
                                
                                progress_bar = status.progress(0, text="Initialisation...")
                                status_log_area = status.empty() 
                                
                                start_time = datetime.now()
                                st.session_state['module3_running'] = True
                                st.session_state['module3_run_id'] = target_domain
                                st.session_state['module3_logs'] = "" 

                                try:
                                    scan_generator = run_vulnerability_scan(target_domain, user_config)
                                    log_area_main = st.empty() 
                                    
                                    for log_line in scan_generator:
                                        
                                        try:
                                            if isinstance(log_line, str) and log_line.startswith("[STATE]"):
                                                parts = log_line[7:].strip().split('/')
                                                if len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit():
                                                    completed = int(parts[0])
                                                    total = int(parts[1])
                                                    percent_complete = completed / total if total > 0 else 0.0
                                                    progress_bar.progress(percent_complete, text=f"Scanning... {completed}/{total} cibles.")
                                                    status_log_area.write(f"Avancement: {completed} de {total} cibles...")
                                                else:
                                                    status_log_area.write(log_line[7:].strip())
                                            else:
                                                st.session_state['module3_logs'] = (st.session_state.get('module3_logs','') + "\n" + str(log_line)).strip()
                                                log_area_main.code(st.session_state['module3_logs'], language='bash') 
                                        except Exception as e:
                                            st.session_state['module3_logs'] = (st.session_state.get('module3_logs','') + "\n" + f"[LOG-PROCESS-ERROR] {str(e)}").strip()
                                            log_area_main.code(st.session_state['module3_logs'], language='bash')

                                except Exception as e:
                                    st.error(f"Erreur critique lors du lancement du Module 3: {e}")
                                    scan_successful = False
                                
                                elapsed_time = (datetime.now() - start_time).total_seconds()
                                
                                st.session_state['module3_elapsed'] = elapsed_time
                                st.session_state['module3_running'] = False
                                
                                status.update(label=f"‚úÖ Module 3 (Vuln. Scan) termin√© en {elapsed_time:.2f}s", state="complete", expanded=False)

                                all_logs.append(f"\n--- LOGS MODULE 3 ({elapsed_time:.2f}s) ---\n" + st.session_state.get('module3_logs', ''))
                                
                                display_vuln_scan_report(target_domain)
                                st.divider()
            
            
            # 4. POST-SCAN EXECUTOR
            if user_config['post_scan_command']:
                 with placeholder.status(f"üåê Ex√©cution de la commande Post-Scan...", expanded=True) as status:
                    output_lines = []
                    execute_post_scan_command(target_domain, user_config['post_scan_command'], output_lines)
                    all_logs.append(f"\n--- LOGS POST-SCAN EXECUTOR ---\n" + "\n".join(output_lines))
                    status.update(label=f"‚úÖ Commande Post-Scan termin√©e", state="complete", expanded=False)
            
            # Effets de fin apr√®s l'ex√©cution de tous les modules
            if scan_successful:
                st.balloons() 
                st.toast("Analyse compl√®te termin√©e avec succ√®s ! üöÄ", icon='‚úÖ')
            else:
                st.snow() 
                st.toast("Analyse termin√©e avec des avertissements/erreurs. ‚ö†Ô∏è", icon='üö®')

        
        # =======================================================
        # 5. CONSOLE PoC (external)
        # =======================================================
        
        # Ajout des colonnes pour l'espacement: 1 (gauche), 3 (contenu), 1 (droite)
        col_spacer_left, col_content, col_spacer_right = st.columns([1, 3, 1])

        with col_content:
            st.divider() # Utilisation du s√©parateur moderne

            # --- Pr√©pare les clefs session_state d√©di√©es √† la console PoC pour √©viter collisions ---
            if 'poc_shell_cmd_history_list' not in st.session_state:
                st.session_state['poc_shell_cmd_history_list'] = []
            if 'poc_current_shell_command_input' not in st.session_state:
                st.session_state['poc_current_shell_command_input'] = ""
            if 'poc_last_status' not in st.session_state:
                st.session_state['poc_last_status'] = None
            if 'poc_last_time' not in st.session_state:
                st.session_state['poc_last_time'] = None
            if 'poc_max_history' not in st.session_state:
                st.session_state['poc_max_history'] = 500  # limite raisonnable pour la perf

            # --- Import et appel de la console PoC externe ---
            try:
                from poc_console import render_poc_console
            except Exception as e:
                st.error(f"Impossible de charger poc_console.py : {e}")
                st.info(
                    "La console PoC est indisponible. "
                    "V√©rifiez que poc_console.py est dans le m√™me dossier et qu'elle expose render_poc_console(target, user_config)."
                )
            else:
                try:
                    # render_poc_console doit utiliser ses propres clefs st.session_state (pr√©fix√©es 'poc_')
                    render_poc_console(target_domain, user_config)
                except Exception as e:
                    st.error(f"Erreur lors de l'ex√©cution de la console PoC : {e}")
                    try:
                        import traceback
                        tb = traceback.format_exc()
                        st.text("Traceback (debug):")
                        st.text(tb)
                    except Exception:
                        pass

            # --- Fin de la console PoC ---
            st.divider() # Utilisation du s√©parateur moderne

            
        # Section de Documentation √âthique et M√©thodologie
        st.divider() # Utilisation du s√©parateur moderne
        
        with st.expander("M√©thodologie TROPIC : D√©tails du Score de S√©curit√© et √âthique"):
            st.markdown("""
                L'√©valuation de TROPIC repose sur une m√©thodologie √† deux piliers pour garantir la pertinence √©thique :
                
                ### 1. Score des Headers (Max 100 points)
                Le score initial est de 100 points. Chaque en-t√™te manquant ou mal configur√© entra√Æne une d√©duction imm√©diate.
                
                | En-t√™te / Probl√®me | S√©v√©rit√© | P√©nalit√© | Explication √âthique |
                | :--- | :--- | :--- | :--- |
                | **Strict-Transport-Security (HSTS)** | CRITICAL | -20 pts | D√©faut de forcer HTTPS (risque de session hijacking). |
                | **Content-Security-Policy (CSP)** | CRITICAL | -20 pts | Permet les injections de code (XSS), non conforme aux bonnes pratiques modernes. |
                | **X-Frame-Options / X-Content-Type-Options** | HIGH | -10 pts | Failles contre le clickjacking et l'ex√©cution de contenu non d√©sir√©. |
                | **Divulgation Serveur / X-Powered-By** | MEDIUM | -5 pts | Fournit √† l'attaquant des informations faciles pour cibler les vuln√©rabilit√©s. |
                
                ### 2. Ajustement par Exposition d'API
                Le score des Headers est ensuite ajust√© par le nombre d'endpoints critiques non prot√©g√©s (r√©ponse **200 OK**) et par la d√©tection d'injection active.
                
                * **P√©nalit√© par Endpoint (ENDPOINT_EXPOSED) :** -{} points.
                * **P√©nalit√© par Injection (INJECTION_VULNERABLE) :** -{} points.
                * **P√©nalit√© par R√©flexion (PARAM_REFLECTION) :** -{} points.
                
                Le score final est le score ajust√© (minimum 0).
            """.format(SECURITY_SCORE_WEIGHTS.get('ENDPOINT_EXPOSED', 15), SECURITY_SCORE_WEIGHTS.get('INJECTION_VULNERABLE', 30), SECURITY_SCORE_WEIGHTS.get('PARAM_REFLECTION', 10))) 
            
            st.info("L'objectif de TROPIC est de fournir une √©valuation claire et exploitable pour permettre la **rem√©diation** imm√©diate des failles de s√©curit√© de base.")


        # Affichage du Log Final
        with st.expander("Voir les Logs d'Ex√©cution Bruts (Multi-Module et Post-Scan)"):
            st.code(''.join(all_logs), language='bash')

# --- BLOC DE LANCEMENT SIMPLIFI√â ---
if __name__ == "__main__":
    main()
